require("dotenv").config();
const { Telegraf, session } = require("telegraf");
const { mongoose } = require("mongoose");
const { findUserByIdOrCreate } = require("./database/Response/User");
const {
  setTitle,
  setTitleSlide,
  setTextSlide,
  removePresentation,
  getLastSlide,
} = require("./database/Response/Presintation");

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
bot.use((ctx, next) => {
  if (!ctx.session) {
    ctx.session = {};
  }
  return next();
});

bot.command("start", async (ctx) => {
  try {
    const chatID = ctx.from.id;
    const firstName = ctx.from.first_name;
    const isPremium = ctx.from.is_premium || false;
    const userId = ctx.from.username;
    await findUserByIdOrCreate(userId, firstName, chatID, isPremium);
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã`);
    await ctx.reply(`–ë–æ—Ç –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! –ü–æ—à–ª–∏ –≤–æ–Ω`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ù–∞—á–∞—Ç—å!", callback_data: "get_title_pricentation" }],
        ],
      },
    });
  } catch (e) {
    console.log(e);
  }
});

bot.action("get_title_pricentation", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏");
  ctx.session.expecting = "slideName";
  ctx.answerCbQuery();
});

bot.action("new_slide", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞");
  ctx.session.expecting = "slideTitle";
  ctx.answerCbQuery();
});

bot.action("set_text_slide", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–∞–π–¥–∞");
  ctx.session.expecting = "slideText";
  ctx.answerCbQuery();
});

bot.action("remove_presentation", async (ctx) => {
  const userId = await ctx.from.username;
  let remove_presentation = await removePresentation(userId);
  if (!remove_presentation.success) {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ü§ï");
  }
  await ctx.reply("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞! üöÆ");
  await ctx.reply(`–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é?`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü–æ–µ—Ö–∞–ª–∏!", callback_data: "get_title_pricentation" }],
      ],
    },
  });
  ctx.session.expecting = await null;
});
bot.on("text", async (ctx) => {
  try {
    const userId = ctx.from.username;
    let type = ctx.session.expecting;
    console.log(type);
    if (!type) {
      ctx.session.expecting = null;
      return ctx.reply("–°–µ–π—á–∞—Å —á—É—Ç—å-—á—É—Ç—å –Ω–µ –ø–æ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è /start");
    }

    let text = ctx.message.text;
    if (type === "slideName") {
      let saveTitle = await setTitle(userId, text);
      if (!saveTitle || !saveTitle.success) {
        ctx.session.expecting = null;
        return ctx.reply("–°–µ–π—á–∞—Å —á—É—Ç—å-—á—É—Ç—å –Ω–µ –ø–æ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è /start");
      }
      ctx.session.expecting = null;
      return ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "get_title_pricentation" },
              { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–∞–π–¥", callback_data: "new_slide" },
            ],
          ],
        },
      });
    } else if (type === "slideTitle") {
      let saveTitle = await setTitleSlide(userId, text);
      if (!saveTitle || !saveTitle.success) {
        ctx.session.expecting = null;
        return ctx.reply("–°–µ–π—á–∞—Å —á—É—Ç—å-—á—É—Ç—å –Ω–µ –ø–æ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è /start");
      }
      ctx.session.expecting = null;
      return ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
                callback_data: "remove_presentation",
              },
            ],
            [{ text: "üìú –¢–µ–∫—Å—Ç –ø—Ä–µ–∑–∏–Ω—Ç–∞—Ü–∏–∏", callback_data: "set_text_slide" }],
            [{ text: "üì• –°–∫–∞—á–∞—Ç—å", callback_data: "download" }],
          ],
        },
      });
    } else if (type === "slideText") {
      let saveTitle = await setTextSlide(userId, text);
      if (!saveTitle || !saveTitle.success) {
        ctx.session.expecting = null;
        return ctx.reply("–°–µ–π—á–∞—Å —á—É—Ç—å-—á—É—Ç—å –Ω–µ –ø–æ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è /start");
      }
      ctx.session.expecting = null;
      let lastSlideInfo = await getLastSlide(userId);
      console.log(lastSlideInfo);
      return ctx.replyWithHTML(
        `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n<b>${lastSlideInfo.data.title}</b>\n<code>${lastSlideInfo.data.text}</code>`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
                  callback_data: "remove_presentation",
                },
              ],
              [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–∞–π–¥", callback_data: "new_slide" }],
              [{ text: "üì• –°–∫–∞—á–∞—Ç—å", callback_data: "download" }],
            ],
          },
        }
      );
    }

    ctx.session.expecting = await null;
    await ctx.answerCbQuery();
  } catch (e) {
    console.log(e);
    await ctx.answerCbQuery(); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback
    return ctx.reply("–Ø —Å–ª–æ–º–∞–ª—Å—è, –Ω–∞–ø–∏—à–∏ @O101O1O1O");
  }
});

let start = async () => {
  try {
    await mongoose.connect("mongodb://127.0.0.1:27017/bot");
    console.log("Connected to database");

    await bot.launch();
    console.log("Bot is running");
  } catch (e) {
    console.log(e);
  }
};

start();
