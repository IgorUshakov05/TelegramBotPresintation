require("dotenv").config();
const { Telegraf, session, Markup } = require("telegraf");
const { mongoose } = require("mongoose");
const fs = require("fs");
const axios = require("axios");
const {
  findUserByIdOrCreate,
  getAllUsers,
} = require("./database/Response/User");
const {
  setTitle,
  setTitleSlide,
  setBackgroundSlide,
  updateLastSlideText,
  seeSLides,
  setTextSlide,
  removeBackgroundLastSlide,
  updateLastSlideTitle,
  setDisCountDownLoad,
  removePresentation,
  removeLastSlide,
  getLastSlide,
  setCountDownLoad,
} = require("./database/Response/Presintation");
const { createPresentation } = require("./make/create_file");
const { generatePresentation } = require("./make/chatgpt");
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
bot.use((ctx, next) => {
  if (!ctx.session) {
    ctx.session = {};
  }
  return next();
});

bot.command("start", async (ctx) => {
  try {
    const chatID = await ctx.from.id;
    const firstName = await ctx.from.first_name;
    const isPremium = (await ctx.from.is_premium) || false;
    const userId = await ctx.from.username;
    if (!userId) return await ctx.reply("–ü–æ—Å—Ç–∞–≤—å—Ç–µ username –≤ –ø—Ä–æ—Ñ–∏–ª–µ!");
    console.log(ctx.from);
    console.log(`–ó–∞–ø—É—Å–∫ –æ—Ç ${firstName}, ${userId}`);
    let create = await findUserByIdOrCreate(
      userId,
      firstName,
      chatID,
      isPremium,
      ctx
    );
    if (!create.success) return await ctx.reply("–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start");
    if (userId === "O101O1O1O") {
      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã`,
        Markup.keyboard([["üë± –†–µ–∂–∏–º —Å–º–µ—Ä—Ç–Ω–æ–≥–æ"], ["üëÅÔ∏è –†–µ–∂–∏–º –±–æ–≥–∞"]])
          .resize()
          .oneTime()
      );
    } else {
      await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ù–∞—á–∞—Ç—å!", callback_data: "get_title_pricentation" }],
          ],
        },
      });
    }
  } catch (e) {
    console.log(e);
  }
});

bot.action("get_title_pricentation", (ctx) => {
  ctx.replyWithHTML(
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ–¥–∞ 19-–≥–æ –≤–µ–∫–∞ –≤ –†–æ—Å—Å–∏–∏</i>\n\n<b>–ú–∞–∫—Å–∏–º—É–º 7 —Å–ª–∞–π–¥–æ–≤!</b>"
  );
  ctx.session.expecting = "slideName";
  ctx.answerCbQuery();
});

let themes = [
  {
    name: "Blue",
  },
  {
    name: "Turquoise",
  },
  {
    name: "Red",
  },
  {
    name: "Orange",
  },
  {
    name: "Green",
  },
  {
    name: "Purple",
  },
  {
    name: "Yellow",
  },
  {
    name: "Light_Green",
  },
];

bot.action("getUserData", async (ctx) => {
  if (ctx.from.username !== "O101O1O1O")
    return ctx.reply("–°–ª—ã—à, —É —Ç–µ–±—è –ø—Ä–∞–≤ –Ω–µ—Ç!");
  let getData = await getAllUsers();

  // getData.users.forEach(async (user) => {
  //   await ctx.replyWithHTML(
  //     `<a href="https://t.me/${user.userID}">${user.firstName}</a>${
  //       user.isPremium ? " - ü™ô" : ""
  //     }`,
  //     { disable_web_page_preview: true }
  //   );
  // });
  ctx.answerCbQuery();
});

bot.action("getContUser", async (ctx) => {
  if (ctx.from.username !== "O101O1O1O")
    return ctx.reply("–°–ª—ã—à, —É —Ç–µ–±—è –ø—Ä–∞–≤ –Ω–µ—Ç!");
  let getData = await getAllUsers();
  await ctx.replyWithHTML(`${getData.users.length} - –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
  ctx.answerCbQuery();
});

bot.action("sendAdd", async (ctx) => {
  const userId = await ctx.from.username;
  ctx.session.expecting = null;
});

bot.action("cancel", (ctx) => {
  ctx.reply("–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏");
  ctx.session.expecting = null;
  ctx.answerCbQuery();
});

bot.action("add", (ctx) => {
  ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç! –ú–æ–∂–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
    },
  });
  ctx.session.expecting = "sendAdd";
  ctx.answerCbQuery();
});

bot.on("callback_query", async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const userId = await ctx.from.username;
  await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: ${callbackData}`);
  let getPresintation = await seeSLides(userId);
  if (!getPresintation.success)
    return ctx.reply("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ :(");
  let countDown = await setCountDownLoad(userId);
  let result = 5 - countDown.count.countDownLoad;
  if (result <= 0) return ctx.reply("‚ùå –ó–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å :(");
  await ctx.reply("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...");

  let giminiPres = await generatePresentation(
    getPresintation.presintation.title
  );
  let createPresentationOfUser = await createPresentation(
    giminiPres,
    Number(callbackData) - 1,
    userId
  );
  if (!createPresentationOfUser.success) {
    let decrement = await setDisCountDownLoad(userId);
    console.log(
      decrement.success
        ? "–î–æ–±–∞–≤–∏–ª–∏ –ø–æ–ø—ã—Ç–∫—É —É "
        : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏ —É ",
      userId
    );
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞!");
  }
  await ctx.replyWithHTML(
    `üì© –û—Ç–ø—Ä–∞–≤–∫–∞, –Ω–µ –∑–∞–±—É–¥—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å <a href='https://t.me/O101O1O1O'>—Å–æ–∑–¥–∞—Ç–µ–ª—è!</a>\n<b>–û—Å—Ç–∞–ª–æ—Å—å ${
      result - 1
    } —Å–∫–∞—á–∏–≤–∞–Ω–∏–π</b>`
  );
  await ctx.sendDocument({
    source: `./storage/${userId}.pptx`,
  });
  return;
});

bot.hears("üë± –†–µ–∂–∏–º —Å–º–µ—Ä—Ç–Ω–æ–≥–æ", async (ctx) => {
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å! üëã`);
  await ctx.replyWithHTML(
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ–¥–∞ 19-–≥–æ –≤–µ–∫–∞ –≤ –†–æ—Å—Å–∏–∏</i>\n\n<b>–ú–∞–∫—Å–∏–º—É–º 7 —Å–ª–∞–π–¥–æ–≤!</b>",
    Markup.keyboard([["üì• –°–∫–∞—á–∞—Ç—å"]])
      .resize()
      .oneTime()
  );
  ctx.session.expecting = await "slideName";
});

bot.hears("üëÅÔ∏è –†–µ–∂–∏–º –±–æ–≥–∞", async (ctx) => {
  const userId = await ctx.from.username;
  const firstName = await ctx.from.first_name;

  if (userId === "O101O1O1O") {
    ctx.reply(`–ì–æ—Å–ø–∞–¥–∏–Ω, ${firstName}, —á—Ç–æ –≤–∞–º —É–≥–æ–¥–Ω–æ?`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëÅÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö",
              callback_data: "getUserData",
            },
          ],
          [
            {
              text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
              callback_data: "addBlackList",
            },
          ],
          [
            {
              text: "1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
              callback_data: "getContUser",
            },
          ],
          [
            {
              text: "üì¢ –†–µ–∫–ª–∞–º–∞",
              callback_data: "add",
            },
          ],
        ],
      },
    });
  } else {
    await ctx.reply(
      `–°–ª—ã—à, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤!`,
      Markup.keyboard([["üì• –°–∫–∞—á–∞—Ç—å"]])
        .resize()
        .oneTime()
    );
  }
  ctx.session.expecting = await null;
});

async function addvenset(ctx, text, fileId) {
  // –ü–æ–ª—É—á–∞–µ–º chatId –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  let getChatID = await (await getAllUsers()).users.map((user) => user.chatID);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const chatId of getChatID) {
    try {
      if (fileId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await ctx.telegram.sendPhoto(chatId, fileId, {
          caption: text,
          parse_mode: "HTML",
        });
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.sendMessage(chatId, text, {
          parse_mode: "HTML",
        });
      }
    } catch (error) {
      if (error.response && error.response.error_code === 403) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
        );
      } else {
        // –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`,
          error
        );
      }
    }
  }

  // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log(`–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞ ${getChatID.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
}

bot.on("text", async (ctx) => {
  try {
    const userId = ctx.from.username;
    let type = ctx.session.expecting;
    if (ctx.message.text === "üì• –°–∫–∞—á–∞—Ç—å") {
      let media = [];
      themes.forEach((thema) => {
        media.push({
          type: "photo",
          media: { source: `./icons/${thema.name}.png` },
        });
      });
      await ctx.replyWithMediaGroup(media);
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "1",
                callback_data: "1",
              },
              {
                text: "2",
                callback_data: "2",
              },
            ],
            [
              {
                text: "3",
                callback_data: "3",
              },
              {
                text: "4",
                callback_data: "4",
              },
            ],
            [
              {
                text: "5",
                callback_data: "5",
              },
              {
                text: "6",
                callback_data: "6",
              },
            ],
            [
              {
                text: "7",
                callback_data: "7",
              },
              {
                text: "8",
                callback_data: "8",
              },
            ],
          ],
        },
      });
      return;
    }

    if (!type) {
      ctx.session.expecting = null;
      return ctx.reply("–°–µ–π—á–∞—Å —á—É—Ç—å-—á—É—Ç—å –Ω–µ –ø–æ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è /start");
    }

    let text = ctx.message.text;
    if (type === "slideName") {
      let saveTitle = await setTitle(userId, text);
      if (!saveTitle || !saveTitle.success) {
        ctx.session.expecting = null;
        return ctx.reply("–°–µ–π—á–∞—Å —á—É—Ç—å-—á—É—Ç—å –Ω–µ –ø–æ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è /start");
      }
      return ctx.reply(
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        Markup.keyboard([["üì• –°–∫–∞—á–∞—Ç—å"]])
          .resize()
          .oneTime()
      );
    }
  } catch (e) {
    console.log(e);
    return ctx.reply("–Ø —Å–ª–æ–º–∞–ª—Å—è, –Ω–∞–ø–∏—à–∏ @O101O1O1O");
  }
});

let start = async () => {
  try {
    await mongoose.connect("mongodb://127.0.0.1:27017/bot");
    console.log("Connected to database");

    await bot.launch();
    console.log("Bot is running");
  } catch (e) {
    console.log(e);
  }
};

start();
